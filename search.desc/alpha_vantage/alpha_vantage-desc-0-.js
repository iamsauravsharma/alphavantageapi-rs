searchState.loadedDescShard("alpha_vantage", 0, "Rust Client/Wrapper built for Alphavantage API.\nModule for basic definition of user information like …\nModule which provides trait to implement own client as …\nModule for crypto real time data\nModule for custom url call\nModule for return earning per share for a company\nModule for Economic Indicator\nModule which contains all types of error for alpha vantage …\nModule for exchange currency (both digital &amp; physical …\nModule for Forex realtime and historical data\nModule for returning latest price and volume information\nModule for searching specific symbol or companies\nSet API key using user selected or created client\nSet Rapid API key using user selected or created client\nModule for stock time series\nModule for Technical Indicator\nModule which contains some common trait implementation for …\nUse alphavantage API provider\nStruct for initializing client which contains different …\nReturn latest top 100 points recommended if no historical …\n15 min interval\n5 min interval\nReturns full api data points recommended if a full …\n1 min interval\nEnum for declaring output size of API call\nProvider for alpha vantage API\nUser <code>RapidAPI</code> as provider\n60 min interval\n30 min interval\nEnum for declaring interval for intraday time series\nCrypto method for calling cryptography function with help …\nMethod for calling custom function not implemented …\nMethod for returning <code>EarningBuilder</code> for earning API\nMethod for economic indicator builder\nMethod for creating <code>ExchangeBuilder</code> for exchanging …\nMethod for creating <code>ForexBuilder</code> for <code>Forex</code> API\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod to get api key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod for creating <code>QuoteBuilder</code> from <code>APIClient</code>\nMethod for creating search builder\nMethod for initializing <code>ApiClient</code> struct using  user …\nMethod for initializing <code>ApiClient</code> struct using user …\nMethod for creating Stock time Builder from <code>APIClient</code>\nMethod for technical indicator builder\nTrait which can be implemented for all common library …\nAlphaVantage provider output function which provides one …\nRapidAPI provider function which provides two field path …\nStruct which holds Crypto currency information\nBuilder to help create <code>Crypto</code>\nEnum for declaring function for crypto series by defining …\nreturns the daily historical time series for a digital …\nStruct which stores Crypto data\nreturns the monthly historical time series for a digital …\nreturns the weekly historical time series for a digital …\nReturn close value\nReturn a data\nReturn digital currency code\nReturn digital currency name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn high value\nReturn meta data information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns JSON data\nReturn last refreshed time\nReturn low value\nReturn market code\nReturn market name\nCreate new <code>CryptoBuilder</code> with help of <code>APIClient</code>\nReturn open value\nReturn time\nReturn time zone of all data time\nReturn volume\nBuilder to create new Custom Struct\nAdd extra parameter to url\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns JSON data struct\nCreate new <code>CustomBuilder</code> from <code>APIClient</code>\nStruct to store information of annual earning\nStruct to store earning for symbol\nBuilder to help create Earning\nStruct to store information of quarterly earning\nReturn Annual earning list for symbol\nReturn Estimated eps of symbol for quarter\nReturn annual earning fiscal date ending\nReturn fiscal date ending quarterly earning\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns JSON data\nCreate new Earning Builder with help of <code>APIClient</code>\nReturn quarterly earning for symbol\nReturn reported date for quarterly earning\nReturn reported eps for annual earning\nReturn reported eps of symbol for quarter. Return None if …\nReturn value of surprise. return None if api return none\nReturn surprise percentage for symbol quarterly earning. …\nReturn symbol of company\nannually interval\ndaily interval\nStruct for storing a data values\nStruct for indicator\nBuilder to help create <code>EconomicIndicator</code>\nEnum for declaring interval for economic indicator\nEnum for declaring maturity for economic indicator\n5 year maturity\nmonthly interval\nquarterly interval\n10 year maturity\n30 year maturity\n3 month maturity\nweekly interval\nReturn data as a vector\nReturn date\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet interval for API\nReturn interval of economic indicator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns JSON data\nSet maturity for API\nReturn name of economic indicator\nCreate new <code>EconomicIndicatorBuilder</code> form <code>APIClient</code>\nReturn unit of economic indicator\nReturn value for Data\nError which is raised if error message is returned by API …\nError which is raised if information is returned by API …\nError which is raised if alpha vantage server returns some …\nError which is raised if note is returned by API instead …\nError which is raised if url is failed to get created\nError which is raised if client fails to decode it into …\nError which is raised when desired number of data is not …\nError which is raised if API return empty response instead …\nContains the error value\nMain error/failure enum\nError which is raise if failed to get output from server\nContains the success value\nResult type for alpha vantage crate\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStruct used for exchanging currency\nBuilder to create <code>Exchange</code>\nget ask price. Return None if no ask price\nget bid price. Returns None if no bid price\nget from code from which exchange is performed\nget to code from exchange\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns JSON data\nget from name from which exchange is performed\nget to name from exchange\nCreate new <code>ExchangeBuilder</code> from <code>APIClient</code>\nGet Rate for exchange\nGet time when exchange rate was last refreshed along with …\nReturn time zone of all data time\nreturns the daily time series (timestamp, open, high, low, …\nStruct to store Data value\nStruct to store Forex data after forex API call\nBuilder to create <code>Forex</code>\nEnum for declaring function for forex function by defining …\nreturns intraday time series (timestamp, open, high, low, …\nreturns the monthly time series (timestamp, open, high, …\nreturns the weekly time series (timestamp, open, high, …\nReturn close value\nMethod return Data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn high value\nReturn information of data\nDefine time series interval for forex\nReturn interval for intraday\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns JSON data\nReturn last refreshed time\nReturn low value\nCreate new <code>ForexBuilder</code> from <code>APIClient</code>\nReturn open value\nDefine output size for intraday or daily forex\nReturn output size which can be full or compact\nReturn from symbol\nReturn to symbol\nReturn time for data\nReturn time zone of all data time\nStruct for storing Quote related information\nBuilder to create <code>Quote</code>\nreturn change\nreturn change percent\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturn high value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns JSON data\nget last trading day\nreturn low value\nCreate new <code>QuoteBuilder</code> from <code>APIClient</code>\nreturn open value\nreturn previous\nreturn price value\nget symbol\nreturn volume\nStruct which stores matches data for search keyword\nstruct for storing search method data\nBuilder to create new <code>Search</code>\nReturn currency\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns JSON data\nReturn market close time\nReturn market open time\nReturn match score\nReturn result of search\nReturn name for symbol\nCreate new <code>SearchBuilder</code> from <code>APIClient</code>\nReturn region of search data\nReturn stock type\nReturn symbol\nReturn time zone of symbol\nreturns daily time series (date, daily open, daily high, …\nreturns daily time series (date, daily open, daily high, …\nStruct for Data value\nreturns intraday time series (timestamp, open, high, low, …\nStruct for storing Meta Data value\nreturns monthly time series (last trading day of each …\nreturns monthly adjusted time series (last trading day of …\nEnum for declaring function for stock time series by …\nStruct for storing time series data\nBuilder to create new <code>TimeSeries</code>\nreturns weekly time series (last trading day of each week, …\nreturns weekly adjusted time series (last trading day of …\nDefine if output time series is adjusted by historical …\nReturn adjusted\nReturn close\nReturn Data\nReturn dividend\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn high\nReturn information present in meta data\nDefine time series interval for intraday stock time series\nTime series interval between two consecutive data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns JSON data\nReturn last refreshed time\nReturn low\nCreate new <code>TimeSeriesBuilder</code> form <code>APIClient</code>\nReturn open\nDefine output size for intraday or daily stock time series\nOutput Size of intraday which can be either Full or compact\nReturn split dividend\nReturn symbol for which time series function is called\nGet time\nReturn time zone of all data time\nReturn volume\ndaily interval\nStruct for storing a data values\n15 min interval\n5 min interval\nmonthly interval\n1 min interval\n60 min interval\nStruct for indicator\nBuilder to help create <code>TechnicalIndicator</code>\nEnum for declaring interval for technical indicator\n30 min interval\nweekly interval\nReturn data as a vector\nAdd extra param to builder\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns JSON data\nReturn meta data in hash form with key as <code>String</code> and …\nCreate new <code>TechnicalIndicatorBuilder</code> form <code>APIClient</code>\nSet series type for API\nReturn time\nSet time period for API\nReturn values for Data\ntrait which helps for performing some common operation on …\nFind a data with a given time as a input return none if no …\nReturn a data which is of latest time period\nReturn a top n latest Data")